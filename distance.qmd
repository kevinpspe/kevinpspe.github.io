# Distance Matching {.unnumbered}

<br />

Distance matching matches an individual that is treated (like Mia) with one that is not treated based on how **close** their confounding values are. We define closeness by Mahalanobis distance:

$$
\delta_{i, j} = \sqrt{(\b x_i - \b x_j)^\top \b\Sigma_x^{-1} (\b x_i - \b x_j)}
$$

::: aside
Where $i$ and $j$ are two units we want to measure the distance between, $\b x$ are their confounder values, and $\b\Sigma_x$ is the covariance matrix of confounders.
:::

It is basically a way to measure distance across multiple dimensions, adjusting for the scale at which confounders are measured. The treated and untreated units that have the smallest distance between them are matched together.

Distance matching is not the best method of matching - it tends to struggle with anything more than 5 confounders, because of the **curse of dimensionality**.

-   This basically means its hard to find close matches when you have more confounders.
-   When you have more confoundners, you should instead use genetic matching (preferred) or propensity score matching.

<br />

To implement distance matching, we will need the **Matching** package.

```{r, eval = FALSE}
library(Matching)
```

Now, we can implement the matching as follows.

```{r, eval = FALSE}
att <- Match(Y = my_data$Y,
             Tr = my_data$D,
             X = my_data[,c("X1","X2", "X3")],
             M = 1,
             BiasAdjust = TRUE,
             Weight = 2)
summary(att)
```

::: aside
BiasAdjust is a complex method that reduces the bias in matching due to imperfect matches. You can change M (number of matches per treated unit) for better matches.
:::

Our output estimate will be the ATT.
