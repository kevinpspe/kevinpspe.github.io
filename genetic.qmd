# Genetic Matching {.unnumbered}

<br />

Genetic matching is an extension of [distance matching](distance.qmd). Like distance matching, genetic matching matches an individual that is treated (like Mia) with one that is not treated based on how **close** their confounding values are.

However, unlike distance matching, which uses a standard mahalanobis distance, genetic matching uses a mahalanobis distance that puts different weights/emphasis on different confounders:

$$
\delta_{i, j}(\b W) = \sqrt{(\b x_i - \b x_j)^\top (\b\Sigma_x^{-1/2})^\top \b W \b\Sigma_x^{-1/2}  (\b x_i - \b x_j)}
$$

::: aside
Where $i$ and $j$ are two units we want to measure the distance between, $\b x$ are their confounder values, and $\b\Sigma_x$ is the covariance matrix of confounders. $\b W$ is a weights matrix.
:::

It is basically a way to measure distance across multiple different confounders, adjusting for the scale at which confounders are measured, and weighting some confounders more than others.

The weights $\b W$ are estimated to make the treated and untreated groups as similar as possible. Then, the treated and untreated units that have the smallest distance between them are matched together.

Genetic matching has been shown by studies to perform better in causal estimation than distance or propensity score matching.

-   However, genetic matching is also more computationally intensive, so for large data sets, propensity score matching might be quicker.

<br />

To implement propensity score matching, we will need the **Matching** and **MatchIt** package.

```{r, eval = FALSE}
library(Matching)
```

First, we need to estimate the propensity scores with a logistic regression. It is recommended to use the propensity score as one of the controls on which to genetic match on.

```{r, eval = FALSE}
propensity <- glm(D ~ X1 + X2,
                  data = my_data,
                  family = "binomial")
my_data$pscore <- predict(propensity,
                          type = "response")
```

Then, we use the **GenMatch()** function to estimate a weights matrix $\b W$:

```{r, eval = FALSE}
set.seed(333) #any number works
gen <- GenMatch(Tr = my_data$D,
                    X = my_data[,c("X1","X2","pscore")],
                    BalanceMatrix = my_data[,c("X1","X2")],   
                    estimand = "ATT",
                    M = 2,
                    replace = TRUE,
                    ties = FALSE,
                    distance.tolerance = 0,
                    print.level = 0,
                    pop.size = 200)
```

::: aside
You can increase pop.size to increase the accuracy - but it will increase the time and computational power needed.
:::

Now, let us conduct estimation with genetic matching:

```{r, eval = FALSE}
att <- Match(Y = my_data$Y,
             Tr = my_data$D,
             X = my_data[,c("X1","X2","pscore")],
             estimand = "ATT",
             M = 2,
             replace = TRUE,
             ties = FALSE,
             distance.tolerance = 0,
             Weight.matrix = gen$Weight.matrix,
             Weight = 3)
```

Our output will be the ATT.
